#!/usr/bin/perl
use strict;
use feature qw(say);
use Switch;
use Getopt::Std;
use Pod::Usage;
use LWP;
use Crypt::SSLeay;    # SSL for LWP
use Term::ReadKey;    # for password reading

my $SERVER_DOMAIN          = 'localhost:8443';
my $SERVER_RESOURCE_PREFIX = 'mds/';
my $SERVER_REALM           = 'api.datacite.org';
my $DEFAULT_USER_NAME      = 'TEST.TEST';
my $DEFAULT_USER_PW        = '12345678';
my %opts;             #Getopt::Std

sub main() {
  getopts("hnp:u:v", \%opts) or pod2usage();
  pod2usage() if $opts{h};

  my ($resource, $method, $query, $content, $content_type);
  my $command = lc shift @ARGV or pod2usage("missing command");
  switch ($command) {
    case "metadata" {
      $resource = 'metadata';
      $content_type = 'application/xml;charset=UTF-8';
      $method = uc shift @ARGV or pod2usage("missing method");
      my $doi = shift @ARGV or pod2usage("missing doi");
      $query = "?doi=$doi";
      my $url = shift @ARGV;
      $query .= "&url=$url" if $url;
    }
    case "doi" {
      $resource = 'doi';
      $content_type = 'text/plain;charset=UTF-8';
      $method = uc shift @ARGV or pod2usage("missing method");
    }
    case "generic" {
      $method = uc shift @ARGV or pod2usage("missing method");
      $resource = shift @ARGV or pod2usage("missing resource");
    }  
    else { pod2usage("unknown command '$command'"); }
  }
  
  if ($method =~ "POST|PUT") {
      my @content = <>;
      $content = "@content";
      chomp $content;
  }
  my $user_name = $opts{u} || $DEFAULT_USER_NAME;
  my $user_pw = $opts{p} || ($opts{u} ? read_pw() : $DEFAULT_USER_PW);
  do_request($method,
    "https://$SERVER_DOMAIN/$SERVER_RESOURCE_PREFIX$resource$query",
    $user_name, $user_pw, $content, $content_type);
}

sub read_pw {
  print STDERR "password: ";
  ReadMode('noecho');
  my $pw = ReadLine(0);
  chomp $pw;
  ReadMode('restore');
  return $pw;
}

sub do_request {
  my ($method, $url, $user_name, $user_pw, $content, $content_type) = @_;

  # build user agent (with credentials)
  my $ua = LWP::UserAgent->new;
  if (!$opts{n}) {
    $ua->credentials($SERVER_DOMAIN, $SERVER_REALM, $user_name, $user_pw);
  }

  # build request
  my $headers = HTTP::Headers->new(
    Accept         => 'application/xml',
    'Content-Type' => $content_type
  );
  my $req = HTTP::Request->new(
    $method => $url,
    $headers, $content
  );

  # pass request to the user agent and get a response back
  my $res = $ua->request($req);

  # output response
  if ($opts{v}) {
    say $req->as_string();
    say $res->as_string();
  }
  else {
    say $res->status_line;
    say $res->content;
  }

}

main();

__END__

=head1 NAME

 mds-suite

=head1 SYNOPSIS

 mds-suite [options] <command> 

 Options:
 -h          - prints this help
 -n          - no credentials (only for testing)
 -u <symbol> - username (defaults to value specified in the script)
 -v          - verbose (display complete request and response)

 Commands:
 doi <method>
 metadata <method> <doi> [<url>]
 generic <method> <resource>
 
 The body of http POST and PULL requests are read from stdin  
   
 
