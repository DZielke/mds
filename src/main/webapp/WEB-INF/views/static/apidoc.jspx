<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<div xmlns:jsp="http://java.sun.com/JSP/Page" xmlns:util="urn:jsptagdir:/WEB-INF/tags/util" xmlns:spring="http://www.springframework.org/tags" version="2.0">
  <jsp:output omit-xml-declaration="yes"/>
  <spring:message code="label_static_apidoc" var="title"/>
  <util:panel id="title" title="${title}">
    <spring:message code="application_name" var="app_name"/>

  <util:toc />
  
<h1>DataCite API for datacentres</h1> <h2>Purpose</h2> <p>The purpose
of this document is to explain how to register datasets via our
RESTful API. Registration is open for research organisations
(datacentres) associated with DataCite members (allocators). Before
you will be able to use our API you must apply for an account with our
service - please contact your <a
href="http://datacite.org/members.html" target="_">local
allocator</a>.</p> <h2>Audience</h2> <p><b>This document and the API
is meant for use by a technical audience.</b> You will need a working
knowledge of programming and the HTTP protocol.</p> <h2>Overview</h2>
<p>The API is implemented in RESTful style. The <b>end point</b> you
are going to use is:</p> <p class="indent"><code>https://api.datacite.org</code></p>
<p>At the moment there are <b>two resources</b>:</p>
<p class="indent"><code>/doi</code></p> <p class="indent"><code>/metadata</code></p> <p>The URI
<code>https://api.datacite.org<b>/metadata</b></code> accepts requests
with 4 HTTP methods: <code>GET</code>, <code>POST</code>, <code>PUT</code> and <code>DELETE</code></p> <p>The
URI <code>https://api.datacite.org<b>/doi</b></code> accepts requests
with 2 HTTP methods: <code>POST</code> and <code>PUT</code></p> <p>The meaning of
the HTTP verbs and request parameters/body will be explained in the
reference section below.</p>

<h3>Security</h3> All the traffic goes via HTTPS - please remember we
do not support bare HTTP. All the requests to this system require HTTP
Basic authentication header. You will get your username and password
from your allocator. Each account have some constraints associated
with it:
<ul>
<li>you will be allowed to mint DOIs only with prefix assigned to
you</li>
<li>you will be allowed to mint DOIs only with URLs in host domains
assigned to you</li>
<li>you will <b>not</b> be able to mint unlimited number of DOIs,
there is a quota assigned to you by your allocator (the quota can be
extended)</li>
</ul>

<h3>Handle System</h3>
<p>It is important to understand that the Handle System (the technical
infrastructure for DOIs) is a distributed network system. The
consequence of this manifests is its inherent latency. For example, DOIs
have TTL (time to live) defaulted to 24 hours, so your changes
will be visible to the resolution intrastructure only when the TTL expires.
Also, if you create a DOI with POST and then immediately
try to update its URL with PUT, you might get the error message HANDLE NOT
EXISTS. This is because it takes some time for the system to register a
handle for a DOI.</p>

<h3>Metadata</h3>

<p>Metadata about your datasets must conform to the standards published by DataCite <a href="http://dx.doi.org/10.5438/0001" target="_blank">doi:10.5438/0001</a>.
All metadata must adhere to the official DataCite XSD <a href="http://dx.doi.org/10.5438/0002" target="_blank">doi:10.5438/0002</a>.  
A sample XML document describing metadata is presented here:</p>


<util:highlight lang="xml">
<![CDATA[
<resource xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://datacite.org/schema/datacite-metadata-v2.0.xsd" lastMetadataUpdate="2006-05-04" metadataVersionNumber="1">
	<identifier identifierType="DOI">10.1594/WDCC/CCSRNIES_SRES_B2</identifier>
	<creators>
		<creator>
			<creatorName>Toru, Nozawa</creatorName>
		</creator>
		<creator>
			<creatorName>Utor, Awazon</creatorName>
			<nameIdentifier nameIdentifierScheme="ISNI">1422 4586 3573 0476</nameIdentifier>
		</creator>
	</creators>
	<titles>
		<title>National Institute for Environmental Studies and Center for Climate System Research Japan</title>
		<title titleType="Subtitle">A survey</title>
	</titles>
	<publisher>World Data Center for Climate (WDCC)</publisher>
	<publicationYear>2004</publicationYear>
	<subjects>
		<subject>Earth sciences and geology</subject>
	</subjects>
	<contributors>
		<contributor contributorType="DataManager">
			<contributorName>PANGAEA</contributorName>
		</contributor>
		<contributor contributorType="ContactPerson">
			<contributorName>Doe, John</contributorName>
			<nameIdentifier nameIdentifierScheme="ORCID">xyz789</nameIdentifier>
		</contributor>
	</contributors>
	<dates>
		<date dateType="Valid">2005-04-05</date>
		<date dateType="Accepted">2005-01-01</date>
	</dates>
	<language>en</language>
	<resourceType resourceTypeGeneral="Image">Animation</resourceType>
	<alternateIdentifiers>
		<alternateIdentifier alternateIdentifierType="ISBN">937-0-1234-56789-X</alternateIdentifier>
	</alternateIdentifiers>
	<relatedIdentifiers>
		<relatedIdentifier relatedIdentifierType="DOI" relationType="IsCitedBy">10.1234/testpub</relatedIdentifier>
		<relatedIdentifier relatedIdentifierType="URN" relationType="Cites">http://testing.ts/testpub</relatedIdentifier>
	</relatedIdentifiers>
	<sizes>
		<size>285 kb</size>
		<size>100 pages</size>
	</sizes>
	<formats>
		<format>text/plain</format>
	</formats>
	<version>1.0</version>
	<rights>Open Database License [ODbL]</rights>
	<descriptions>
		<description descriptionType="Other">
		The current xml-example for a DataCite record is the official example from the documentation.
		<br/>Please look on datcite.org to find the newest versions of sample data and schemas.
		</description>
	</descriptions>
</resource>
]]></util:highlight> 

<h1>API reference</h1> 

<p><strong>Each API call can have optional request parameter <code>testMode</code>. 
If set to "true" or "1" the request will not change the database nor will the DOI handle will be registered or updated.</strong></p>

<h2>Metadata API</h2>
<p><i>URI: https://api.datacite.org/metadata</i></p> 
<h3>GET</h3> 
<p>This request returns the most recent version of metadata associated with a given DOI.</p>
<h4>Request headers</h4> 
<code>Accept=application/xml</code> 
<h4>Request parameters</h4> 
<code>doi</code> (mandatory) - DOI for which metadata is requested
<h4>Request body</h4> 
empty
<h4>Response headers</h4>
<code>Content-Type=application/xml</code> 
<h4>Response body</h4> 
<p>If response status is 200: XML representing a dataset, otherwise short explanation for non-200 status</p> 
<h4>Response statuses</h4> 
<code>200 OK</code> - operation successful
<p><code>403 Forbidden</code> - login problem or dataset belongs to another party</p>
<p><code>404 Not Found</code> - DOI does not exist in our database</p>
<p><code>410 Gone</code> - the requested dataset was marked inactive (using DELETE method)</p>
<p><code>500 Internal Server Error</code> - server internal error,
try later and if problem persists please contact us
</p> 
<h4>Examples</h4> 	

<util:tabs id="script_metadata_get">
<util:tab title="python">
<util:highlight lang="python">
<![CDATA[
import httplib2, sys, base64

endpoint = 'https://api.datacite.org/metadata'

if (len(sys.argv) < 4):
    raise Exception('Please provide username, password and doi')

h = httplib2.Http()
auth_string = base64.encodestring(sys.argv[1] + ':' + sys.argv[2])
response, content = h.request(endpoint + '?doi=' + sys.argv[3],
                              headers={'Accept':'application/xml',
                                       'Authorization':'Basic ' + auth_string})

if (response.status != 200):
    print str(response.status)
 
print(content.decode('utf-8'))
]]>
</util:highlight>
</util:tab>
<util:tab title="perl">
<util:highlight lang="perl">
<![CDATA[
use strict;
use LWP;
use Crypt::SSLeay;    # SSL for LWP

my $endpoint = 'https://api.datacite.org/metadata';

my ($user_name, $user_pass, $doi) = @ARGV 
  or die('Please provide username, password and doi'); 

my $request = HTTP::Request->new(
  GET => "$endpoint?doi=$doi",
  HTTP::Headers->new(
    Accept         => 'application/xml',
  ),
);
$request->authorization_basic($user_name, $user_pass);

my $user_agent = LWP::UserAgent->new;
my $response   = $user_agent->request($request);

print STDERR $response->status_line . "\n";
print $response->content;
]]>
</util:highlight>
</util:tab>
<util:tab title="java">
<util:highlight lang="java">
<![CDATA[
	public void GETMetadataExample(){
		
		try{			
			String restEndpoint = "https://api.datacite.org/metadata";
			String doi = "[doi]";
			String username = "[username]";
			String password = "[password]";
			
			URL u = new URL(restEndpoint+"?doi="+URLEncoder.encode(doi,"UTF-8"));			
			HttpsURLConnection conn = (HttpsURLConnection)u.openConnection();
			conn.setRequestMethod("GET");
			conn.setUseCaches(false);
			conn.setDoInput(true);
			conn.setDoOutput(true);
			conn.setRequestProperty("Accept", "application/xml");
			conn.setRequestProperty("Content-Type", "application/xml;charset=UTF-8");
			 
			sun.misc.BASE64Encoder enc = new sun.misc.BASE64Encoder();
			String encAuth = enc.encode((username+":"+password).getBytes());	
			conn.setRequestProperty("Authorization", "Basic "+encAuth);
			
			conn.connect();
			int responseCode = conn.getResponseCode();
			        
			InputStreamReader isr;
			if (responseCode >= 400){isr = new InputStreamReader(conn.getErrorStream());}
			else{isr = new InputStreamReader(conn.getInputStream());}
			
			BufferedReader br = new BufferedReader(isr);
			StringWriter sw = new StringWriter();
			char[] buffer = new char[1024];
			int n;
			while ((n=br.read(buffer))!=-1){
				sw.write(buffer, 0, n);
			}

			System.out.println("Return Code: "+responseCode);
			System.out.println("Return Body: "+sw.toString());
									
			isr.close();
			sw.close();
			br.close();

		}
		catch(Exception e){
			e.printStackTrace();
		}	
	}	
]]>
</util:highlight>
</util:tab>

</util:tabs>

<h3>POST</h3>
<p>This request creates a dataset and stores the first version of metadata. The request body must contain valid XML.</p>
<h4>Request headers</h4> 
<code>Content-Type=application/xml;charset=UTF-8</code> 
<h4>Request body</h4> 
<p>UFT-8 encoded metadata</p>
<h4>Response body</h4> 
<p>short explanation of status code e.g. CREATED, HANDLE_ALREADY_EXISTS etc</p> 
<h4>Response statuses</h4> 
<p><code>201 Created</code> - operation successful</p>
<p><code>400 Bad Request</code> - invalid XML, wrong domain, wrong prefix</p>
<p><code>403 Forbidden</code> - login problem, quota exceeded</p>
<p><code>500 Internal Server Error</code> - server internal error,
try later and if problem persists please contact us</p> 
<h4>Examples</h4> 	
<util:tabs id="script_metadata_post">
<util:tab title="python">
<util:highlight lang="python">
<![CDATA[
import httplib2, sys, base64, codecs
 
if (len(sys.argv) < 5):
    raise Exception('Please provide username, password and location of metadata file')
 
endpoint = 'https://api.datacite.org/metadata'

body_unicode = codecs.open(sys.argv[3], 'r', encoding='utf-8').read()

print(body_unicode);

h = httplib2.Http()
auth_string = base64.encodestring(sys.argv[1] + ':' + sys.argv[2])
response, content = h.request(endpoint,
                              'POST',
                              body = body_unicode.encode('utf-8'),
                              headers={'Content-Type':'application/xml;charset=UTF-8',
                                       'Authorization':'Basic ' + auth_string})
if (response.status != 201):
    print str(response.status)
 
print(content.decode('utf-8'))
]]>
</util:highlight>
</util:tab>
<util:tab title="perl">
<util:highlight lang="perl">
<![CDATA[
use strict;
use LWP;
use Crypt::SSLeay;    # SSL for LWP

my $endpoint = 'https://api.datacite.org/metadata';

my ($user_name, $user_pass) = @ARGV
  or die('Please provide username and password; metadata is read from stdin');

my @body = <STDIN>;

my $request = HTTP::Request->new(
  POST => $endpoint,
  HTTP::Headers->new(
    'Content-Type' => 'application/xml;charset=UTF-8',
  ),
  "@body"
);
$request->authorization_basic($user_name, $user_pass);

my $user_agent = LWP::UserAgent->new;
my $response   = $user_agent->request($request);

print STDERR $response->status_line . "\n";
print $response->content;
]]>
</util:highlight>
</util:tab>
<util:tab title="java">
<util:highlight lang="java">
<![CDATA[
	public void POSTMetadataExample(){
		
		try{			
			String restEndpoint = "https://api.datacite.org/metadata";
			String url = "[url]";
			String username = "[username]";
			String password = "[password]";
			String metadata = "[metadata]";
			
			restEndpoint+= (url!=null && url.trim().length()>0)?"?url="+URLEncoder.encode(url,"UTF-8"):"";
			
			URL u = new URL(restEndpoint);
			HttpsURLConnection conn = (HttpsURLConnection)u.openConnection();
			conn.setRequestMethod("POST");
			conn.setUseCaches(false);
			conn.setDoInput(true);
			conn.setDoOutput(true);
			conn.setRequestProperty("Accept", "application/xml");
			conn.setRequestProperty("Content-Type", "application/xml;charset=UTF-8");
			 
			sun.misc.BASE64Encoder enc = new sun.misc.BASE64Encoder();
			String encAuth = enc.encode((username+":"+password).getBytes());	
			conn.setRequestProperty("Authorization", "Basic "+encAuth);
			        
			DataOutputStream dos = new DataOutputStream(conn.getOutputStream());
			dos.writeBytes(metadata);
			dos.close();
			
			conn.connect();
			int responseCode = conn.getResponseCode();
			        
			InputStreamReader isr;
			if (responseCode >= 400){isr = new InputStreamReader(conn.getErrorStream());}
			else{isr = new InputStreamReader(conn.getInputStream());}
			
			BufferedReader br = new BufferedReader(isr);
			StringWriter sw = new StringWriter();
			char[] buffer = new char[1024];
			int n;
			while ((n=br.read(buffer))!=-1){
				sw.write(buffer, 0, n);
			}

			System.out.println("Return Code:"+responseCode);
			System.out.println("Return Body:"+sw.toString());
									
			isr.close();
			sw.close();
			br.close();
		}
		catch(Exception e){
			e.printStackTrace();
		}
	}	
]]>
</util:highlight>
</util:tab>
</util:tabs>

<h3>PUT</h3>
<p>This request adds a new version of metadata for existing dataset. The request body must contain valid XML.</p>
<p>This method will behave as POST (above) if specified DOI was not present in the database - this requirement
 stems from the fact that some users cannot determine if the first version of metadata was already stored or not. You 
 still should strive to use POST and PUT as they were intended.</p>
<code>Content-Type=application/xml;charset=UTF-8</code> 
<h4>Request body</h4> 
<p>UFT-8 encoded metadata</p>
<h4>Response body</h4> 
<p>short explanation of status code e.g. CREATED, HANDLE_ALREADY_EXISTS etc</p> 
<h4>Response statuses</h4> 
<p><code>201 Created</code> - operation successful</p>
<p><code>400 Bad Request</code> - invalid XML, wrong domain, wrong prefix</p>
<p><code>403 Forbidden</code> - login problem, quota excceded</p>
<p><code>500 Internal Server Error</code> - server internal error,
try later and if problem persists please contact us</p> 
<h4>Examples</h4>
<util:tabs id="script_metadata_put">
<util:tab title="python">
<util:highlight lang="python">
<![CDATA[
import httplib2, sys, base64, codecs
 
if (len(sys.argv) < 5):
    raise Exception('Please provide username, password and location of metadata file')
 
endpoint = 'https://api.datacite.org/metadata'

body_unicode = codecs.open(sys.argv[3], 'r', encoding='utf-8').read()

print(body_unicode);

h = httplib2.Http()
auth_string = base64.encodestring(sys.argv[1] + ':' + sys.argv[2])
response, content = h.request(endpoint,
                              'PUT',
                              body = body_unicode.encode('utf-8'),
                              headers={'Content-Type':'application/xml;charset=UTF-8',
                                       'Authorization':'Basic ' + auth_string})
if (response.status != 201):
    print str(response.status)
 
print(content.decode('utf-8'))

]]>
</util:highlight>
</util:tab>
<util:tab title="perl">
<util:highlight lang="perl">
<![CDATA[
use strict;
use LWP;
use Crypt::SSLeay;    # SSL for LWP

my $endpoint = 'https://api.datacite.org/metadata';

my ($user_name, $user_pass, $doi) = @ARGV
  or die('Please provide username and password; body is read from stdin');

my @body = <STDIN>;

my $request = HTTP::Request->new(
  PUT => $endpoint,
  HTTP::Headers->new(
    'Content-Type' => 'application/xml;charset=UTF-8',
  ),
  "@body"
);
$request->authorization_basic($user_name, $user_pass);

my $user_agent = LWP::UserAgent->new;
my $response   = $user_agent->request($request);

print STDERR $response->status_line . "\n";
print $response->content;
]]>
</util:highlight>
</util:tab>
<util:tab title="java">
<util:highlight lang="java">
<![CDATA[
	public void PUTMetadataExample(){
		
		try{			
			String restEndpoint = "https://api.datacite.org/metadata";
			String url = "[url]";
			String username = "[username]";
			String password = "[password]";
			String metadata = "[metadata]";			
			
			restEndpoint+= (url!=null && url.trim().length()>0)?"?url="+URLEncoder.encode(url,"UTF-8"):"";
			
			URL u = new URL(restEndpoint);
			HttpsURLConnection conn = (HttpsURLConnection)u.openConnection();
			conn.setRequestMethod("PUT");
			conn.setUseCaches(false);
			conn.setDoInput(true);
			conn.setDoOutput(true);
			conn.setRequestProperty("Accept", "application/xml");
			conn.setRequestProperty("Content-Type", "application/xml;charset=UTF-8");
			 
			sun.misc.BASE64Encoder enc = new sun.misc.BASE64Encoder();
			String encAuth = enc.encode((username+":"+password).getBytes());	
			conn.setRequestProperty("Authorization", "Basic "+encAuth);
			        
			DataOutputStream dos = new DataOutputStream(conn.getOutputStream());
			dos.writeBytes(metadata);
			dos.close();
			
			conn.connect();
			int responseCode = conn.getResponseCode();
			        
			InputStreamReader isr;
			if (responseCode >= 400){isr = new InputStreamReader(conn.getErrorStream());}
			else{isr = new InputStreamReader(conn.getInputStream());}
			
			BufferedReader br = new BufferedReader(isr);
			StringWriter sw = new StringWriter();
			char[] buffer = new char[1024];
			int n;
			while ((n=br.read(buffer))!=-1){
				sw.write(buffer, 0, n);
			}

			System.out.println("Return Code:"+responseCode);
			System.out.println("Return Body:"+sw.toString());			
			
			isr.close();
			sw.close();
			br.close();
		}
		catch(Exception e){
			e.printStackTrace();
		}
	}
]]>
</util:highlight>
</util:tab>
</util:tabs>

<h3>DELETE</h3> 
<p>This request allows mark a dataset as 'inactive'. A parameter 'doi' is required. Subsequent GET for such dataset will return 410. Inactivating already inactive dataset makes it active.</p>
<h4>Request parameters</h4> 
<code>doi</code> (mandatory) - DOI
<h4>Request body</h4> 
empty
<h4>Response body</h4> 
<p>if response status 200 - XML representing a dataset, otherwise short explanation for non-200 status</p> 
<h4>Response statuses</h4> 
<p><code>200 OK</code> - operation successful: dataset deactivated</p>
<p><code>201 Created</code> - operation successful: dataset reactivated</p>
<p><code>403 Forbidden</code> - login problem or dataset belongs to another party</p>
<p><code>404 Not Found</code> - DOI does not exist in our database</p>
<p><code>500 Internal Server Error</code> - server internal error,
try later and if problem persists please contact us
</p> 
<h4>Examples</h4>
<util:tabs id="script_metadata_delete">
<util:tab title="python"> 	
<util:highlight lang="python">
<![CDATA[
import httplib2, sys, base64

endpoint = 'https://api.datacite.org/metadata'

if (len(sys.argv) < 4):
    raise Exception('Please provide username, password and doi')

h = httplib2.Http()
auth_string = base64.encodestring(sys.argv[1] + ':' + sys.argv[2])
response, content = h.request(endpoint + '?doi=' + sys.argv[3],
                              'DELETE',
                              headers={'Authorization':'Basic ' + auth_string})

if (response.status != 201):
    print str(response.status)
 
print(content.decode('utf-8'))
]]>
</util:highlight>
</util:tab>
<util:tab title="perl">
<util:highlight lang="perl">
<![CDATA[
use strict;
use LWP;
use Crypt::SSLeay;    # SSL for LWP

my $endpoint = 'https://api.datacite.org/metadata';

my ($user_name, $user_pass, $doi) = @ARGV
  or die('Please provide username, password and doi');                       

my $request = HTTP::Request->new(
  DELETE => "$endpoint?doi=$doi",
);
$request->authorization_basic($user_name, $user_pass);

my $user_agent = LWP::UserAgent->new;
my $response   = $user_agent->request($request);

print STDERR $response->status_line . "\n";
print $response->content;
]]>
</util:highlight>
</util:tab>
<util:tab title="java">
<util:highlight lang="java">
<![CDATA[
	public void DELETEMetadataExample(){
		
		try{			
			String restEndpoint = "https://api.datacite.org/metadata";
			String doi = "[doi]";
			String username = "[username]";
			String password = "[password]";

			URL u = new URL(restEndpoint+"?doi="+URLEncoder.encode(doi,"UTF-8"));
			HttpsURLConnection conn = (HttpsURLConnection)u.openConnection();
			conn.setRequestMethod("DELETE");
			conn.setUseCaches(false);
			conn.setDoInput(true);
			conn.setDoOutput(true);
			conn.setRequestProperty("Accept", "application/xml");
			conn.setRequestProperty("Content-Type", "application/xml;charset=UTF-8");
			 
			sun.misc.BASE64Encoder enc = new sun.misc.BASE64Encoder();
			String encAuth = enc.encode((username+":"+password).getBytes());	
			conn.setRequestProperty("Authorization", "Basic "+encAuth);
			
			conn.connect();
			int responseCode = conn.getResponseCode();
			        
			InputStreamReader isr;
			if (responseCode >= 400){isr = new InputStreamReader(conn.getErrorStream());}
			else{isr = new InputStreamReader(conn.getInputStream());}
			
			BufferedReader br = new BufferedReader(isr);
			StringWriter sw = new StringWriter();
			char[] buffer = new char[1024];
			int n;
			while ((n=br.read(buffer))!=-1){
				sw.write(buffer, 0, n);
			}

			System.out.println("Return Code:"+responseCode);
			System.out.println("Return Body:"+sw.toString());
									
			isr.close();
			sw.close();
			br.close();
		}
		catch(Exception e){
			e.printStackTrace();
		}
	}	
]]>
</util:highlight>
</util:tab>
</util:tabs>

<h2>Doi API</h2>
<p><i>URI: https://api.datacite.org/doi</i></p> 
<h3>POST</h3>
<p>POST will mint new DOI, check domains and quota restrictions. A Datacentre's doiQuotaUsed will be increased by 1. A new record in Datasets will be created.</p>
<h4>Request headers</h4> 
<p><code>Content-Type=text/plain;charset=UTF-8</code></p>
<h4>Request body</h4> 
<p>just two lines: doi and url, UFT-8 encoded</p>
<h4>Response body</h4> 
<p>short explanation of status code e.g. CREATED, HANDLE_ALREADY_EXISTS etc</p> 
<h4>Response statuses</h4> 
<p><code>201 Created</code> - operation successful</p>
<p><code>400 Bad Request</code> - request body must be exactly two lines: DOI and URL; , wrong domain, wrong prefix</p>
<p><code>403 Forbidden</code> - login problem, quota excceded</p>
<p><code>500 Internal Server Error</code> - server internal error,
try later and if problem persists please contact us</p> 
<h4>Examples</h4> 	
<util:tabs id="script_doi_post">
<util:tab title="python"> 	
<util:highlight lang="python">
<![CDATA[
import httplib2, sys, base64, codecs
 
if (len(sys.argv) < 4):
    raise Exception('Please provide username, password, location of doi-url file')
 
endpoint = 'https://api.datacite.org/doi'

body_unicode = codecs.open(sys.argv[3], 'r', encoding='utf-8').read().strip()

print(body_unicode);

h = httplib2.Http()
auth_string = base64.encodestring(sys.argv[1] + ':' + sys.argv[2])

response, content = h.request(endpoint,
                              'POST',
                              body = body_unicode.encode('utf-8'),
                              headers={'Content-Type':'text/plain;charset=UTF-8',
                                       'Authorization':'Basic ' + auth_string})
if (response.status != 201):
    print str(response.status)
 
print(content.decode('utf-8'))

]]>
</util:highlight>
</util:tab>
<util:tab title="perl">
<util:highlight lang="perl">
<![CDATA[
use strict;
use LWP;
use Crypt::SSLeay;    # SSL for LWP

my $endpoint = 'https://api.datacite.org/doi';

my ($user_name, $user_pass) = @ARGV      
  or die('Please provide username, password; body is read from stdin');      

my @body = <STDIN>;
my $body = "@body";
chomp $body;

my $request = HTTP::Request->new(
  POST => $endpoint,
  HTTP::Headers->new(
    'Content-Type' => 'text/plain;charset=UTF-8',
  ),
  $body
);
$request->authorization_basic($user_name, $user_pass);

my $user_agent = LWP::UserAgent->new;
my $response   = $user_agent->request($request);

print STDERR $response->status_line . "\n";
print $response->content;
]]>
</util:highlight>
</util:tab>
<util:tab title="java">
<util:highlight lang="java">
<![CDATA[
	public void POSTDoiExample(){
		
		try{			
			String restEndpoint = "https://api.datacite.org/doi";
			String doi = "[doi]";
			String url = "[url]";
			String username = "[username]";
			String password = "[password]";
			
			URL u = new URL(restEndpoint);
			HttpsURLConnection conn = (HttpsURLConnection)u.openConnection();
			conn.setRequestMethod("POST");
			conn.setUseCaches(false);
			conn.setDoInput(true);
			conn.setDoOutput(true);
			conn.setRequestProperty("Accept", "application/xml");
			conn.setRequestProperty("Content-Type", "text/plain;charset=UTF-8");
			 
			sun.misc.BASE64Encoder enc = new sun.misc.BASE64Encoder();
			String encAuth = enc.encode((username+":"+password).getBytes());	
			conn.setRequestProperty("Authorization", "Basic "+encAuth);
			
			DataOutputStream dos = new DataOutputStream(conn.getOutputStream());
			dos.writeBytes(doi+"\n"+url);
			dos.close();			
			
			conn.connect();
			int responseCode = conn.getResponseCode();
			        
			InputStreamReader isr;
			if (responseCode >= 400){isr = new InputStreamReader(conn.getErrorStream());}
			else{isr = new InputStreamReader(conn.getInputStream());}
			
			BufferedReader br = new BufferedReader(isr);
			StringWriter sw = new StringWriter();
			char[] buffer = new char[1024];
			int n;
			while ((n=br.read(buffer))!=-1){
				sw.write(buffer, 0, n);
			}

			System.out.println("Return Code: "+responseCode);
			System.out.println("Return Body: "+sw.toString());
									
			isr.close();
			sw.close();
			br.close();
		}
		catch(Exception e){
			e.printStackTrace();
		}	
	}	
]]>
</util:highlight>
</util:tab>
</util:tabs>

<p><code>doi-url file</code> has to contain the request body, so a file with two lines: doi and url.</p>

<h3>PUT</h3>
<p>PUT will update URL of DOI without changing the database.</p>
<h4>Request headers</h4> 
<p><code>Content-Type=text/plain;charset=UTF-8</code></p>
<h4>Request body</h4> 
<p>just two lines: doi and url, UFT-8 encoded</p>
<h4>Response body</h4> 
<p>short explanation of status code e.g. CREATED, HANDLE_ALREADY_EXISTS etc</p> 
<h4>Response statuses</h4> 
<p><code>200 OK</code> - operation successful</p>
<p><code>400 Bad Request</code> - request body must be exactly two lines: DOI and URL; wrong domain, wrong prefix</p>
<p><code>403 Forbidden</code> - login problem, quota excceded</p>
<p><code>500 Internal Server Error</code> - server internal error,
try later and if problem persists please contact us</p> 
<h4>Examples</h4> 	
<util:tabs id="script_doi_put">
<util:tab title="python"> 	
<util:highlight lang="python">
<![CDATA[
import httplib2, sys, base64, codecs
 
if (len(sys.argv) < 4):
    raise Exception('Please provide username, password and location of doi-url file')
 
endpoint = 'https://api.datacite.org/doi'

body_unicode = codecs.open(sys.argv[3], 'r', encoding='utf-8').read().strip()

print(body_unicode);

h = httplib2.Http()
auth_string = base64.encodestring(sys.argv[1] + ':' + sys.argv[2])

response, content = h.request(endpoint,
                              'PUT',
                              body = body_unicode.encode('utf-8'),
                              headers={'Content-Type':'text/plain;charset=UTF-8',
                                       'Authorization':'Basic ' + auth_string})
if (response.status != 201):
    print str(response.status)
 
print(content.decode('utf-8'))

]]>
</util:highlight>
</util:tab>
<util:tab title="perl">
<util:highlight lang="perl">
<![CDATA[
use strict;
use LWP;
use Crypt::SSLeay;    # SSL for LWP

my $endpoint = 'https://api.datacite.org/doi';

my ($user_name, $user_pass) = @ARGV      
  or die('Please provide username, password; body is read from stdin');      

my @body = <STDIN>;
my $body = "@body";
chomp $body;

my $request = HTTP::Request->new(
  PUT => $endpoint,
  HTTP::Headers->new(
    'Content-Type' => 'text/plain;charset=UTF-8',
  ),
  $body
);
$request->authorization_basic($user_name, $user_pass);

my $user_agent = LWP::UserAgent->new;
my $response   = $user_agent->request($request);

print STDERR $response->status_line . "\n";
print $response->content;
]]>
</util:highlight>
</util:tab>
<util:tab title="java">
<util:highlight lang="java">
<![CDATA[
	public void PUTDoiExample(){
		
		try{			
			String restEndpoint = "https://api.datacite.org/doi";
			String doi = "[doi]";
			String url = "[url]";
			String username = "[username]";
			String password = "[password]";
			
			URL u = new URL(restEndpoint);
			HttpsURLConnection conn = (HttpsURLConnection)u.openConnection();
			conn.setRequestMethod("PUT");
			conn.setUseCaches(false);
			conn.setDoInput(true);
			conn.setDoOutput(true);
			conn.setRequestProperty("Accept", "application/xml");
			conn.setRequestProperty("Content-Type", "text/plain;charset=UTF-8");
			 
			sun.misc.BASE64Encoder enc = new sun.misc.BASE64Encoder();
			String encAuth = enc.encode((username+":"+password).getBytes());	
			conn.setRequestProperty("Authorization", "Basic "+encAuth);
			
			DataOutputStream dos = new DataOutputStream(conn.getOutputStream());
			dos.writeBytes(doi+"\n"+url);
			dos.close();			
			
			conn.connect();
			int responseCode = conn.getResponseCode();
			        
			InputStreamReader isr;
			if (responseCode >= 400){isr = new InputStreamReader(conn.getErrorStream());}
			else{isr = new InputStreamReader(conn.getInputStream());}
			
			BufferedReader br = new BufferedReader(isr);
			StringWriter sw = new StringWriter();
			char[] buffer = new char[1024];
			int n;
			while ((n=br.read(buffer))!=-1){
				sw.write(buffer, 0, n);
			}

			System.out.println("Return Code: "+responseCode);
			System.out.println("Return Body: "+sw.toString());
									
			isr.close();
			sw.close();
			br.close();
		}
		catch(Exception e){
			e.printStackTrace();
		}	
	}	
]]>
</util:highlight>
</util:tab>
</util:tabs>

<p><code>doi-url file</code> has to contain the request body, so a file with two lines: doi and url.</p>

  </util:panel>
</div>


