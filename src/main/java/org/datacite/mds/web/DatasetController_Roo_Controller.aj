// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.datacite.mds.web;

import java.lang.Long;
import java.lang.String;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.validation.Valid;
import org.datacite.mds.domain.Datacentre;
import org.datacite.mds.domain.Dataset;
import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect DatasetController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST)
    public String DatasetController.create(@Valid Dataset dataset, BindingResult result, Model model) {
        if (result.hasErrors()) {
            model.addAttribute("dataset", dataset);
            addDateTimeFormatPatterns(model);
            return "datasets/create";
        }
        dataset.persist();
        return "redirect:/datasets/" + dataset.getId();
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String DatasetController.createForm(Model model) {
        model.addAttribute("dataset", new Dataset());
        addDateTimeFormatPatterns(model);
        List dependencies = new ArrayList();
        if (Datacentre.countDatacentres() == 0) {
            dependencies.add(new String[]{"datacentre", "datacentres"});
        }
        model.addAttribute("dependencies", dependencies);
        return "datasets/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String DatasetController.show(@PathVariable("id") Long id, Model model) {
        addDateTimeFormatPatterns(model);
        model.addAttribute("dataset", Dataset.findDataset(id));
        model.addAttribute("itemId", id);
        return "datasets/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String DatasetController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            model.addAttribute("datasets", Dataset.findDatasetEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) Dataset.countDatasets() / sizeNo;
            model.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            model.addAttribute("datasets", Dataset.findAllDatasets());
        }
        addDateTimeFormatPatterns(model);
        return "datasets/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String DatasetController.update(@Valid Dataset dataset, BindingResult result, Model model) {
        if (result.hasErrors()) {
            model.addAttribute("dataset", dataset);
            addDateTimeFormatPatterns(model);
            return "datasets/update";
        }
        dataset.merge();
        return "redirect:/datasets/" + dataset.getId();
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String DatasetController.updateForm(@PathVariable("id") Long id, Model model) {
        model.addAttribute("dataset", Dataset.findDataset(id));
        addDateTimeFormatPatterns(model);
        return "datasets/update";
    }
    
    @RequestMapping(params = { "find=ByDoiEquals", "form" }, method = RequestMethod.GET)
    public String DatasetController.findDatasetsByDoiEqualsForm(Model model) {
        return "datasets/findDatasetsByDoiEquals";
    }
    
    @RequestMapping(params = "find=ByDoiEquals", method = RequestMethod.GET)
    public String DatasetController.findDatasetsByDoiEquals(@RequestParam("doi") String doi, Model model) {
        model.addAttribute("datasets", Dataset.findDatasetsByDoiEquals(doi).getResultList());
        return "datasets/list";
    }
    
    @ModelAttribute("datacentres")
    public Collection<Datacentre> DatasetController.populateDatacentres() {
        return Datacentre.findAllDatacentres();
    }
    
    void DatasetController.addDateTimeFormatPatterns(Model model) {
        model.addAttribute("dataset_lastlandingpagestatuscheck_date_format", DateTimeFormat.patternForStyle("S-", LocaleContextHolder.getLocale()));
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public String DatasetController.showJson(@PathVariable("id") Long id) {
        return Dataset.findDataset(id).toJson();
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> DatasetController.createFromJson(@RequestBody String json) {
        Dataset.fromJsonToDataset(json).persist();
        return new ResponseEntity<String>("Dataset created", HttpStatus.CREATED);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public String DatasetController.listJson() {
        return Dataset.toJsonArray(Dataset.findAllDatasets());
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> DatasetController.createFromJsonArray(@RequestBody String json) {
        for (Dataset dataset: Dataset.fromJsonArrayToDatasets(json)) {
            dataset.persist();
        }
        return new ResponseEntity<String>("Dataset created", HttpStatus.CREATED);
    }
    
}
