// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.datacite.mds.web;

import java.lang.Long;
import java.lang.String;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.validation.Valid;
import org.datacite.mds.domain.Allocator;
import org.datacite.mds.domain.Datacentre;
import org.datacite.mds.domain.Prefix;
import org.springframework.core.convert.converter.Converter;
import org.springframework.core.convert.support.GenericConversionService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect DatacentreController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST)
    public String DatacentreController.create(@Valid Datacentre datacentre, BindingResult result, Model model) {
        if (result.hasErrors()) {
            model.addAttribute("datacentre", datacentre);
            return "datacentres/create";
        }
        datacentre.persist();
        return "redirect:/datacentres/" + datacentre.getId();
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String DatacentreController.createForm(Model model) {
        model.addAttribute("datacentre", new Datacentre());
        List dependencies = new ArrayList();
        if (Allocator.countAllocators() == 0) {
            dependencies.add(new String[]{"allocator", "allocators"});
        }
        model.addAttribute("dependencies", dependencies);
        return "datacentres/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String DatacentreController.show(@PathVariable("id") Long id, Model model) {
        model.addAttribute("datacentre", Datacentre.findDatacentre(id));
        model.addAttribute("itemId", id);
        return "datacentres/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String DatacentreController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            model.addAttribute("datacentres", Datacentre.findDatacentreEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) Datacentre.countDatacentres() / sizeNo;
            model.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            model.addAttribute("datacentres", Datacentre.findAllDatacentres());
        }
        return "datacentres/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String DatacentreController.update(@Valid Datacentre datacentre, BindingResult result, Model model) {
        if (result.hasErrors()) {
            model.addAttribute("datacentre", datacentre);
            return "datacentres/update";
        }
        datacentre.merge();
        return "redirect:/datacentres/" + datacentre.getId();
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String DatacentreController.updateForm(@PathVariable("id") Long id, Model model) {
        model.addAttribute("datacentre", Datacentre.findDatacentre(id));
        return "datacentres/update";
    }
    
    @RequestMapping(params = { "find=BySymbolEquals", "form" }, method = RequestMethod.GET)
    public String DatacentreController.findDatacentresBySymbolEqualsForm(Model model) {
        return "datacentres/findDatacentresBySymbolEquals";
    }
    
    @RequestMapping(params = "find=BySymbolEquals", method = RequestMethod.GET)
    public String DatacentreController.findDatacentresBySymbolEquals(@RequestParam("symbol") String symbol, Model model) {
        model.addAttribute("datacentres", Datacentre.findDatacentresBySymbolEquals(symbol).getResultList());
        return "datacentres/list";
    }
    
    @RequestMapping(params = { "find=ByNameLike", "form" }, method = RequestMethod.GET)
    public String DatacentreController.findDatacentresByNameLikeForm(Model model) {
        return "datacentres/findDatacentresByNameLike";
    }
    
    @RequestMapping(params = "find=ByNameLike", method = RequestMethod.GET)
    public String DatacentreController.findDatacentresByNameLike(@RequestParam("name") String name, Model model) {
        model.addAttribute("datacentres", Datacentre.findDatacentresByNameLike(name).getResultList());
        return "datacentres/list";
    }
    
    @ModelAttribute("allocators")
    public Collection<Allocator> DatacentreController.populateAllocators() {
        return Allocator.findAllAllocators();
    }
    
    @ModelAttribute("prefixes")
    public Collection<Prefix> DatacentreController.populatePrefixes() {
        return Prefix.findAllPrefixes();
    }
    
    Converter<Allocator, String> DatacentreController.getAllocatorConverter() {
        return new Converter<Allocator, String>() {
            public String convert(Allocator allocator) {
                return new StringBuilder().append(allocator.getSymbol()).append(" ").append(allocator.getPassword()).append(" ").append(allocator.getName()).toString();
            }
        };
    }
    
    Converter<Datacentre, String> DatacentreController.getDatacentreConverter() {
        return new Converter<Datacentre, String>() {
            public String convert(Datacentre datacentre) {
                return new StringBuilder().append(datacentre.getSymbol()).append(" ").append(datacentre.getPassword()).append(" ").append(datacentre.getName()).toString();
            }
        };
    }
    
    Converter<Prefix, String> DatacentreController.getPrefixConverter() {
        return new Converter<Prefix, String>() {
            public String convert(Prefix prefix) {
                return new StringBuilder().append(prefix.getPrefix()).toString();
            }
        };
    }
    
    @InitBinder
    void DatacentreController.registerConverters(WebDataBinder binder) {
        if (binder.getConversionService() instanceof GenericConversionService) {
            GenericConversionService conversionService = (GenericConversionService) binder.getConversionService();
            conversionService.addConverter(getAllocatorConverter());
            conversionService.addConverter(getDatacentreConverter());
            conversionService.addConverter(getPrefixConverter());
        }
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public String DatacentreController.showJson(@PathVariable("id") Long id) {
        return Datacentre.findDatacentre(id).toJson();
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> DatacentreController.createFromJson(@RequestBody String json) {
        Datacentre.fromJsonToDatacentre(json).persist();
        return new ResponseEntity<String>("Datacentre created", HttpStatus.CREATED);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public String DatacentreController.listJson() {
        return Datacentre.toJsonArray(Datacentre.findAllDatacentres());
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> DatacentreController.createFromJsonArray(@RequestBody String json) {
        for (Datacentre datacentre: Datacentre.fromJsonArrayToDatacentres(json)) {
            datacentre.persist();
        }
        return new ResponseEntity<String>("Datacentre created", HttpStatus.CREATED);
    }
    
}
