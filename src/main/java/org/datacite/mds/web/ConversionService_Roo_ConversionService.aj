// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.datacite.mds.web;

import java.lang.String;
import org.datacite.mds.domain.Allocator;
import org.datacite.mds.domain.Datacentre;
import org.datacite.mds.domain.Dataset;
import org.datacite.mds.domain.Metadata;
import org.datacite.mds.domain.Prefix;
import org.springframework.core.convert.converter.Converter;
import org.springframework.format.FormatterRegistry;

privileged aspect ConversionService_Roo_ConversionService {
    
    public void ConversionService.installLabelConverters(FormatterRegistry registry) {
        registry.addConverter(new AllocatorConverter());
        registry.addConverter(new DatacentreConverter());
        registry.addConverter(new DatasetConverter());
        registry.addConverter(new MetadataConverter());
        registry.addConverter(new PrefixConverter());
    }
    
    public void ConversionService.afterPropertiesSet() {
        super.afterPropertiesSet();
        installLabelConverters(getObject());
    }
    
    static class org.datacite.mds.web.ConversionService.AllocatorConverter implements Converter<Allocator, String> {
        public String convert(Allocator allocator) {
            return new StringBuilder().append(allocator.getCountDatasets()).append(" ").append(allocator.getSymbol()).append(" ").append(allocator.getPassword()).append(" ").append(allocator.getName()).toString();
        }
        
    }
    
    static class org.datacite.mds.web.ConversionService.DatacentreConverter implements Converter<Datacentre, String> {
        public String convert(Datacentre datacentre) {
            return new StringBuilder().append(datacentre.getPassword()).append(" ").append(datacentre.getRoleName()).append(" ").append(datacentre.getCountDatasets()).append(" ").append(datacentre.getSymbol()).toString();
        }
        
    }
    
    static class org.datacite.mds.web.ConversionService.DatasetConverter implements Converter<Dataset, String> {
        public String convert(Dataset dataset) {
            return new StringBuilder().append(dataset.getDoi()).append(" ").append(dataset.getLastLandingPageStatus()).append(" ").append(dataset.getLastLandingPageStatusCheck()).append(" ").append(dataset.getLastMetadataStatus()).toString();
        }
        
    }
    
    static class org.datacite.mds.web.ConversionService.MetadataConverter implements Converter<Metadata, String> {
        public String convert(Metadata metadata) {
            return new StringBuilder().append(metadata.getNamespace()).append(" ").append(metadata.getMetadataVersion()).append(" ").append(metadata.getCreated()).append(" ").append(metadata.getMaxMetaVerQuery()).toString();
        }
        
    }
    
    static class org.datacite.mds.web.ConversionService.PrefixConverter implements Converter<Prefix, String> {
        public String convert(Prefix prefix) {
            return new StringBuilder().append(prefix.getCreated()).append(" ").append(prefix.getPrefix()).toString();
        }
        
    }
    
}
