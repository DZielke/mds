// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.datacite.mds.web;

import java.lang.Long;
import java.lang.String;
import javax.validation.Valid;
import org.datacite.mds.domain.OaiSource;
import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.core.convert.converter.Converter;
import org.springframework.core.convert.support.GenericConversionService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect OaiSourcesController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST)
    public String OaiSourcesController.create(@Valid OaiSource oaiSource, BindingResult result, Model model) {
        if (result.hasErrors()) {
            model.addAttribute("oaiSource", oaiSource);
            addDateTimeFormatPatterns(model);
            return "oaisources/create";
        }
        oaiSource.persist();
        return "redirect:/oaisources/" + oaiSource.getId();
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String OaiSourcesController.createForm(Model model) {
        model.addAttribute("oaiSource", new OaiSource());
        addDateTimeFormatPatterns(model);
        return "oaisources/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String OaiSourcesController.show(@PathVariable("id") Long id, Model model) {
        addDateTimeFormatPatterns(model);
        model.addAttribute("oaisource", OaiSource.findOaiSource(id));
        model.addAttribute("itemId", id);
        return "oaisources/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String OaiSourcesController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            model.addAttribute("oaisources", OaiSource.findOaiSourceEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) OaiSource.countOaiSources() / sizeNo;
            model.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            model.addAttribute("oaisources", OaiSource.findAllOaiSources());
        }
        addDateTimeFormatPatterns(model);
        return "oaisources/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String OaiSourcesController.update(@Valid OaiSource oaiSource, BindingResult result, Model model) {
        if (result.hasErrors()) {
            model.addAttribute("oaiSource", oaiSource);
            addDateTimeFormatPatterns(model);
            return "oaisources/update";
        }
        oaiSource.merge();
        return "redirect:/oaisources/" + oaiSource.getId();
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String OaiSourcesController.updateForm(@PathVariable("id") Long id, Model model) {
        model.addAttribute("oaiSource", OaiSource.findOaiSource(id));
        addDateTimeFormatPatterns(model);
        return "oaisources/update";
    }
    
    Converter<OaiSource, String> OaiSourcesController.getOaiSourceConverter() {
        return new Converter<OaiSource, String>() {
            public String convert(OaiSource oaiSource) {
                return new StringBuilder().append(oaiSource.getUrl()).append(" ").append(oaiSource.getOwner()).append(" ").append(oaiSource.getLastHarvest()).toString();
            }
        };
    }
    
    @InitBinder
    void OaiSourcesController.registerConverters(WebDataBinder binder) {
        if (binder.getConversionService() instanceof GenericConversionService) {
            GenericConversionService conversionService = (GenericConversionService) binder.getConversionService();
            conversionService.addConverter(getOaiSourceConverter());
        }
    }
    
    void OaiSourcesController.addDateTimeFormatPatterns(Model model) {
        model.addAttribute("oaiSource_lastharvest_date_format", DateTimeFormat.patternForStyle("S-", LocaleContextHolder.getLocale()));
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public String OaiSourcesController.showJson(@PathVariable("id") Long id) {
        return OaiSource.findOaiSource(id).toJson();
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> OaiSourcesController.createFromJson(@RequestBody String json) {
        OaiSource.fromJsonToOaiSource(json).persist();
        return new ResponseEntity<String>("OaiSource created", HttpStatus.CREATED);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public String OaiSourcesController.listJson() {
        return OaiSource.toJsonArray(OaiSource.findAllOaiSources());
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> OaiSourcesController.createFromJsonArray(@RequestBody String json) {
        for (OaiSource oaisource: OaiSource.fromJsonArrayToOaiSources(json)) {
            oaisource.persist();
        }
        return new ResponseEntity<String>("OaiSource created", HttpStatus.CREATED);
    }
    
}
